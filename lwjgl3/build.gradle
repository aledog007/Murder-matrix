buildscript {
  repositories {
    gradlePluginPortal()
  }
  dependencies {
    if (enableGraalNative == 'true') {
      classpath "org.graalvm.buildtools.native:org.graalvm.buildtools.native.gradle.plugin:0.9.28"
    }
  }
}

plugins {
  id "application"
  id 'org.jetbrains.kotlin.jvm'
}

sourceSets.main.resources.srcDirs += [rootProject.file('assets').path]

application {
  mainClass.set("ch.bbw.csr.murder_matrix.lwjgl3.Lwjgl3Launcher")  // Main class configuration
}

eclipse.project.name = appName + '-lwjgl3'

compileJava.options.release.set(21)
compileTestJava.options.release.set(21)

dependencies {
  implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
  implementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
  implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
  implementation 'com.badlogicgames.gdx:gdx-backend-lwjgl3:1.12.1'
  implementation project(':core')

  if (enableGraalNative == 'true') {
    implementation "io.github.berstanio:gdx-svmhelper-backend-lwjgl3:$graalHelperVersion"
    implementation "io.github.berstanio:gdx-svmhelper-extension-freetype:$graalHelperVersion"
  }
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

def os = System.properties['os.name'].toLowerCase()

run {
  workingDir = rootProject.file('assets').path
  setIgnoreExitValue(true)

  if (os.contains('mac')) jvmArgs += "-XstartOnFirstThread"
}

jar {
  archiveFileName.set("${appName}-${projectVersion}.jar")
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
  dependsOn configurations.runtimeClasspath
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
  exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
  dependencies {
    exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
  }
  manifest {
    attributes 'Main-Class': application.mainClass.get()
  }
  doLast {
    file(archiveFile).setExecutable(true, false)
  }
}


tasks.register('dist') {
  dependsOn 'jar'
}

distributions {
  main {
    contents {
      into('libs') {
        project.configurations.runtimeClasspath.files.findAll { file ->
          file.getName() != project.tasks.jar.outputs.files.singleFile.name
        }.each { file ->
          exclude file.name
        }
      }
    }
  }
}

startScripts.dependsOn(':lwjgl3:jar')
startScripts.classpath = project.tasks.jar.outputs.files

if (enableGraalNative == 'true') {
  apply from: file("nativeimage.gradle")
}
repositories {
  mavenCentral()
}
kotlin {
  jvmToolchain(21)
}
